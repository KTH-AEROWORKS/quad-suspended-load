#!/usr/bin/env python
# this line is just used to define the type of document

## Simple talker demo that published std_msgs/Strings messages
## to the 'chatter' topic

import rospy

import numpy 

from std_msgs.msg import String

from quad_control.msg import quad_state_and_cmd

# node will need to get state from qualysis, other sensor, or simulator
from quad_control.msg import quad_state

# import services defined in quad_control
# Four SERVICES ARE BEING USED: SaveData, TrajDes_GUI, Mocap_Id, StartSim
# SaveData is for saving data in txt file
# TrajDes is for selecting trajectory
# Mocap_Id for body detection from QUALISYS
# StartSim stop simulator
from quad_control.srv import *

from quad_control.msg import quad_cmd


from numpy import *

import simplejson

#--------------------------------------------------------------------------#
# Some functions

from numpy import cos as c
from numpy import sin as s


from types import MethodType



import mocap_source




#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#
#                                                                          #
#                                                                          #
#                                                                          #
#            Some Functions                                                #
#                                                                          #
#                                                                          #
#                                                                          #
#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#


def Rx(tt):
    
    return numpy.array([[1.0,0.0,0.0],[0.0,c(tt),-s(tt)],[0.0,s(tt),c(tt)]])

# print Rx(60*3.14/180)

def Ry(tt):
    
    return numpy.array([[c(tt),0.0,s(tt)],[0.0,1,0.0],[-s(tt),0.0,c(tt)]])

# print Ry(60*3.14/180)

def Rz(tt):
    
    return numpy.array([[c(tt),-s(tt),0.0],[s(tt),c(tt),0.0],[0.0,0.0,1]])

# print Rz(60*3.14/180)


def skew(xx):
    
    x = xx[0]
    y = xx[1]
    z = xx[2]
    
    return numpy.array([[0,-z,y],[z,0,-x],[-y,x,0]])

# print skew([1,2,3])

#--------------------------------------------------------------------------#
# orthogonal projection operator
def OP(x):
    
    return -skew(x).dot(skew(x))

#print OP([1,2,3])
#print OP([1,0,0])



#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#
#                                                                          #
#                                                                          #
#                                                                          #
#            Some Controllers                                              #
#                                                                          #
#                                                                          #
#                                                                          #
#--------------------------------------------------------------------------#
#--------------------------------------------------------------------------#


#--------------------------------------------------------------------------#
# parameters_system
class parameters_sys(object):
    
    # acceleration due to gravity (m/s^2)
    g  = 9.81
    
    # mass of vehicles (kg)
    m = 0.5

    # controller gains
    ktt  = 20.0
    ktt2 = 30.0

    kw   = 6.0
    kw2  = 8.0
    
    kv   = 2.0
    kp   = 1.0/numpy.sqrt(2)*2.0

    sigma_p = 0.5
    sigma_v = 0.5

    # Angular velocities multiplication factor
    Dw  = numpy.array([[1.0,0.0,0.0],[0.0,1.0,0.0],[0.0,0.0,1.0]])


    # throttle that cancels weight
    Throttle_neutral = 1484

    # ACRO mode (angular velocity sensitivity)
    ACRO_RP_P = 4.5

    # yaw control: gain
    k_yaw    = 1;
    
    # desired yaw: psi_star (RADIANS)
    psi_star = 0; 

    # The class "constructor" - It's actually an initializer
    # def __init__(self):
    #   self.M = 1.1


def make_par():
    parameters = parameters_sys()
    return parameters





# Desired trajectory for LOAD
def traj_des(t):
    p = numpy.array([0.4,0.3,0.2]);
    v = numpy.array([0.0,0.0,0.0]);
    a = numpy.array([0.0,0.0,0.0]);
    j = numpy.array([0.0,0.0,0.0]);
    s = numpy.array([0.0,0.0,0.0]);

    # from numpy import cos as c
    # from numpy import sin as s

    # r = 1.0
    # w = 0.5
    
    # p = r*w**0*numpy.array([ c(w*t),-s(w*t),0.0]);
    # v = r*w**1*numpy.array([-s(w*t),-c(w*t),0.0]);
    # a = r*w**2*numpy.array([-c(w*t), s(w*t),0.0]);
    # j = r*w**3*numpy.array([ s(w*t), c(w*t),0.0]);
    # s = r*w**4*numpy.array([ c(w*t),-s(w*t),0.0]);
    
    return numpy.concatenate([p,v,a,j,s])



class ControllerOmega():
    
    def __init__(self,parameters = None):
        
        if parameters == None:
            parameters = parameters_sys()

        self.parameters = parameters

    def update_parameters(self,parameters):
        self.parameters = parameters

    def output(self,states,states_d):
        return controller(states,states_d,self.parameters)



# Controller
def controller(states,states_d,parameters):
    
    # mass of vehicles (kg)
    m = parameters.m
    
    # acceleration due to gravity (m/s^2)
    g  = parameters.g

    # Angular velocities multiplication factor
    # Dw  = parameters.Dw
    
    # third canonical basis vector
    e3 = numpy.array([0.0,0.0,1.0])
    
    #--------------------------------------#
    # transported mass: position and velocity
    x  = states[0:3];
    v  = states[3:6];
    # thrust unit vector and its angular velocity
    R  = states[6:15];
    R  = numpy.reshape(R,(3,3))
    n  = R.dot(e3)

    # print(GetEulerAngles(R)*180/3.14)

    
    #--------------------------------------#
    # desired quad trajectory
    xd = states_d[0:3];
    vd = states_d[3:6];
    ad = states_d[6:9];
    jd = states_d[9:12];
    sd = states_d[12:15];
    
    #--------------------------------------#
    # position error and velocity error
    ep = xd - x
    ev = vd - v
    
    
    #--------------------------------------#
    G     = g*e3 + ad
    Gdot  = jd
    G2dot = sd
    
    G_all = numpy.concatenate([G,Gdot,G2dot])
    
    
    #--------------------------------------#

    TT,wd,nTd = UniThurstControlComplete(ep,ev,n,G_all,parameters)

    U = numpy.array([0.0,0.0,0.0,0.0])

    U[0]   = TT*m
    RT     = numpy.transpose(R)
    U[1:4] = RT.dot(wd)


    #--------------------------------------#
    # yaw control: gain
    k_yaw    = parameters.k_yaw; 
    # desired yaw: psi_star
    psi_star = parameters.psi_star; 
    # current euler angles
    euler = GetEulerAngles(R);
    phi   = euler[0];
    theta = euler[1];
    psi   = euler[2];

    psi_star_dot = 0;
    psi_dot  = psi_star_dot - k_yaw*s(psi - psi_star);
    U[3]    = 1/c(phi)*(c(theta)*psi_dot - s(phi)*U[2]);

    U = Cmd_Converter(U,parameters)

    return U

#--------------------------------------------------------------------------#

# Comand converter (from 1000 to 2000)
def Cmd_Converter(U,parameters):

    T = U[0]
    w = U[1:4]

    # mass of vehicles (kg)
    m = parameters.m
    
    # acceleration due to gravity (m/s^2)
    g  = parameters.g

    ACRO_RP_P = parameters.ACRO_RP_P;
    
    

    Max   = ACRO_RP_P*4500/100*pi/180;
    # angular velocity comand between 1000 and 2000 PWM
    U[1] =  1500 + w[0]*500/Max;
    U[2] =  1500 + w[1]*500/Max;
    U[3] =  1500 + w[2]*500/Max;
    

    # REMARK: the throtle comes between 1000 and 2000 PWM
    # conversion gain
    Throttle_neutral = parameters.Throttle_neutral;
    K_THROTLE = m*g/Throttle_neutral;
    U[0] = T/K_THROTLE;

    return U


#--------------------------------------------------------------------------#
def GetEulerAngles(R):

    #phi   = atan2(R(3,2),R(3,3));
    #theta = asin(-R(3,1));
    #psi   = atan2(R(2,1),R(1,1));

    EULER = numpy.array([0.0,0.0,0.0])


    EULER[0] = numpy.arctan2(bound(R[2,1],1,-1),bound(R[2,2],1,-1));
    EULER[1] = numpy.arcsin(-bound(R[2,0],1,-1));
    EULER[2] = numpy.arctan2(bound(R[1,0],1,-1),bound(R[0,0],1,-1));    

    return EULER

def bound(x,maxmax,minmin):

    return numpy.maximum(minmin,numpy.minimum(maxmax,x))

#--------------------------------------------------------------------------#

def UniThurstControlComplete(ep,ev,n,G_all,parameters):


    u, Td, nTd, Tdnorm = UniThrustControl(ep,ev,G_all,parameters)

    error_thrust = OP(n).dot(Td)

    evDot = -u + error_thrust

    u, Td, nTd, Tdnorm, uDot, TdDot, nTdDot, TdnormDot = UniThrustControlDot(ep,ev,evDot,G_all,parameters)

    wd = UniThrustControlAngVel(ep,ev,evDot,n,G_all,parameters)

    TT = dot(Td,n)

    return (TT, wd, nTd)

#--------------------------------------------------------------------------#

def UniThrustControl(ep,ev,G_all,parameters):

    u       = cmd_di_3D(ep,ev,parameters);

    g       = G_all[0:3]

    Td      = g + u;

    Tdnorm  = numpy.linalg.norm(Td);

    nTd     = Td/Tdnorm;

    return (u, Td, nTd, Tdnorm)


#--------------------------------------------------------------------------#

# desired acceleration

def UniThrustControlDot(ep,ev,evDot,G_all,parameters):

    g     = G_all[0:3]
    gDot  = G_all[3:6]

    u,Td,nTd,Tdnorm = UniThrustControl(ep,ev,G_all,parameters)

    uDot    = cmd_di_dot_3D(ep,ev,evDot,parameters)


    TdDot   = gDot + uDot;

    nTdDot   = OP(nTd).dot(TdDot)/numpy.linalg.norm(Td);

    TdnormDot  = dot(Td,TdDot)/numpy.linalg.norm(Td);
                  
    return (u,Td,nTd,Tdnorm,uDot,TdDot,nTdDot,TdnormDot)

#--------------------------------------------------------------------------#

def UniThrustControlAngVel(ep,ev,evDot,n,G_all,parameters):


    u,Td,nTd,Tdnorm,uDot,TdDot,nTdDot,TdnormDot = UniThrustControlDot(ep,ev,evDot,G_all,parameters)

    # gradV   = LyapunovGrad(block,ep,ev);
    gradV,Vgrad_grad_ep,Vgrad_grad_ev = LyapunovGrad2_3D(ep,ev,parameters)


    # gains for angular control
    ktt2  = parameters.ktt2
    ktt   = parameters.ktt

    # desired angular velocity
    wd = ktt2/ktt*skew(n).dot(nTd) + skew(nTd).dot(TdDot)/numpy.linalg.norm(Td) + skew(n).dot(gradV)*(numpy.linalg.norm(Td))*1/ktt;

    return wd


#--------------------------------------------------------------------------#
# FOR DOUBLE INTEGRATOR

def cmd_di_3D(ep,ev,parameters):

    u    = numpy.array([0.0,0.0,0.0])
    u[0] = cmd_di(ep[0],ev[0],parameters)
    u[1] = cmd_di(ep[1],ev[1],parameters)
    u[2] = cmd_di(ep[2],ev[2],parameters)
    
    return u
############################################################################

def cmd_di(ep,ev,parameters):
    # command for double integrator

    # gains
    kp = parameters.kp;
    kv = parameters.kv;

    sigma_p  = parameters.sigma_p;
    sigma_v  = parameters.sigma_v;


    h1  = kp*sigma_p*sat(ep/sigma_p);
    h2  = kv*sigma_v*sat(ev/sigma_v);
    f   = fgain(ev/sigma_v);

    u = f*h1 + h2;

    return u

############################################################################

def cmd_di_dot_3D(ep,ev,evD,parameters):

    udot    = numpy.array([0.0,0.0,0.0])
    udot[0] = cmd_di_dot(ep[0],ev[0],evD[0],parameters)
    udot[1] = cmd_di_dot(ep[1],ev[1],evD[1],parameters)
    udot[2] = cmd_di_dot(ep[2],ev[2],evD[2],parameters)

    return udot

############################################################################

def cmd_di_dot(ep,ev,evD,parameters):
    # command for double integrator

    # gains
    kp = parameters.kp
    kv = parameters.kv

    sigma_p  = parameters.sigma_p
    sigma_v  = parameters.sigma_v

    h1  = kp*sigma_p*sat(ep/sigma_p)
    h2  = kv*sigma_v*sat(ev/sigma_v)
    f   = fgain(ev/sigma_v)

    h1Dot = kp*Dsat(ep/sigma_p)*ev
    h2Dot = kv*Dsat(ev/sigma_v)*evD
    fDot  = Dfgain(ev/sigma_v)*evD/sigma_v

    udot  = fDot*h1 + f*h1Dot + h2Dot

    return udot

############################################################################

def cmd_di_2dot_3D(ep,ev,evD,ev2D,parameters):

    u2dot    = numpy.array([0.0,0.0,0.0])
    u2dot[0] = cmd_di_2dot(ep[0],ev[0],evD[0],ev2D[0],parameters)
    u2dot[1] = cmd_di_2dot(ep[1],ev[1],evD[1],ev2D[1],parameters)
    u2dot[2] = cmd_di_2dot(ep[2],ev[2],evD[2],ev2D[2],parameters)

    return u2dot

############################################################################

def cmd_di_2dot(ep,ev,evD,ev2D,parameters):
    # command for double integrator

    # gains
    kp = parameters.kp
    kv = parameters.kv
    
    sigma_p  = parameters.sigma_p
    sigma_v  = parameters.sigma_v

    h1  = kp*sigma_p*sat(ep/sigma_p);
    h2  = kv*sigma_v*sat(ev/sigma_v);
    f   = fgain(ev/sigma_v);

    h1Dot = kp*Dsat(ep/sigma_p)*ev;
    h2Dot = kv*Dsat(ev/sigma_v)*evD;
    fDot  = Dfgain(ev/sigma_v)*evD/sigma_v;

    h12Dot = kp*D2sat(ep/sigma_p)*ev/sigma_p*ev + kp*Dsat(ep/sigma_p)*evD;
    h22Dot = kv*D2sat(ev/sigma_v)*evD/sigma_v*evD + kv*Dsat(ev/sigma_v)*ev2D;
    f2Dot  = D2fgain(ev/sigma_v)*evD/sigma_v*evD/sigma_v + Dfgain(ev/sigma_v)*ev2D/sigma_v;

    u2dot  = f2Dot*h1 + fDot*h1Dot + fDot*h1Dot + f*h12Dot + h22Dot;

    return u2dot

#--------------------------------------------------------------------------#

def LyapunovGrad2_3D(ep,ev,parameters):

    Vgrad         = numpy.array([0.0,0.0,0.0])
    Vgrad_grad_ep = numpy.array([0.0,0.0,0.0])
    Vgrad_grad_ev = numpy.array([0.0,0.0,0.0])

    Vgrad[0],Vgrad_grad_ep[0],Vgrad_grad_ev[0] = LyapunovGrad2(ep[0],ev[0],parameters)
    Vgrad[1],Vgrad_grad_ep[1],Vgrad_grad_ev[1] = LyapunovGrad2(ep[1],ev[1],parameters)
    Vgrad[2],Vgrad_grad_ep[2],Vgrad_grad_ev[2] = LyapunovGrad2(ep[2],ev[2],parameters)

    return (Vgrad,Vgrad_grad_ep,Vgrad_grad_ev)

############################################################################

def LyapunovGrad2(ep,ev,parameters):

    # Vgrad         = dV/d(ev)
    # Vgrad_grad_ep = d/d(ep) [dV/d(ev)]
    # Vgrad_grad_ev = d/d(ev) [dV/d(ev)]

    # gains
    kp = parameters.kp
    kv = parameters.kv
    
    sigma_p  = parameters.sigma_p
    sigma_v  = parameters.sigma_v

    beta   = 1.0/(2.0*kp)
    h1     = kp*sigma_p*sat(ep/sigma_p)
    h1D    = kp*Dsat(ep/sigma_p-5.80691976388)
    h2     = kv*sigma_v*sat(ev/sigma_v)
    h2D    = kv*Dsat(ev/sigma_v)
    h22D   = kv*D2sat(ev/sigma_v)/sigma_v
    f      = fgain(ev/sigma_v)
    fD     = Dfgain(ev/sigma_v)/sigma_v

    Vgrad = beta*h1*h2D + ev/f + beta/f*((kv**2)*ev - h2*h2D)

    Vgrad_grad_ep = beta*h1D*h2D

    Vgrad_grad_ev = beta*h1*h22D + 1.0/f - ev/(f**2)*fD - beta/(f**2)*fD*((kv**2)*ev - h2*h2D) + beta/f*(kv**2 - h2D*h2D - h2*h22D)

    return (Vgrad,Vgrad_grad_ep,Vgrad_grad_ev)

#--------------------------------------------------------------------------#




def sat(x):

    return x/numpy.sqrt(1 + x**2.0)


def Dsat(x):

    return 1.0/numpy.power(1 + x**2.0,1.5)


def D2sat(x):

    return -3.0*x/numpy.power(1.0+x**2.0, 2.5)


def sat_Int(x):
    # primitive of saturation function

    return numpy.sqrt(1.0 + x**2.0) - 1.0;



def fgain(x):

    return 1.0/numpy.sqrt(1.0 + x**2.0)


def Dfgain(x):

    return -x/numpy.power(1.0 + x**2.0, 1.5);


def D2fgain(x):

    return (-1.0 + 2.0*x**2.0)/numpy.power(1.0 + x**2.0, 2.5);


def fgain_int(x):

    # integral of x/fgain(x) from 0 to in

    return 1.0/3.0*(-1.0 + numpy.power(1.0 + x**2.0, 1.5));

def fgain_int2(x):

    # integral of sat(x)*Dsat(x)/fgain(x) from 0 to x

    return 1.0 - 1.0/sqrt(1.0 + x**2.0);




class Median_Filter():
    # N is order of median filter
    def __init__(self, N):
        self.N = N
        self.data = numpy.zeros(N)
    
    def update_data(self,new_data):
        N = self.N
        self.data[:-1] = self.data[1:]
        self.data[-1]  = new_data

    def output(self):
        return numpy.median(self.data)

    def up_and_out(self,new_data):
        self.update_data(new_data)
        return self.output()

class Median_Filter_3D():
    # N is order of median filter
    def __init__(self, N):
        self.N = N
        self.Dx =  Median_Filter(N)
        self.Dy =  Median_Filter(N)
        self.Dz =  Median_Filter(N)

    def up_and_out(self,new_data):
        Dx_new = self.Dx.up_and_out(new_data[0])
        Dy_new = self.Dy.up_and_out(new_data[1])
        Dz_new = self.Dz.up_and_out(new_data[2])
        return numpy.array([Dx_new,Dy_new,Dz_new])


class Velocity_Filter():
    def __init__(self,N,old_position,old_time):
        self.median_filter = Median_Filter_3D(N)
        self.old_position = old_position
        self.old_time = old_time

    def out(self,new_position,new_time):
        dt = new_time - self.old_time
        vel_estimate =  (new_position - self.old_position)/dt
        self.old_position = new_position
        self.old_time = new_time
        return self.median_filter.up_and_out(vel_estimate)






# class TrajectoryGenerator():

#     def __init__(self):
#         self.p1 = 0.0 
#         self.p2 = 0.0
#         self.p3 = 0.0
#         self.p4 = 0.0

#         self.offset   = numpy.array([0.0,0.0,0.0])

#         self.Rotation = numpy.array([[1.0,0.0,0.0],[0.0,1.0,0.0],[0.0,0.0,1.0]])


#     def traj_des(self,t):
#         # by default, desired trajectory is to saty in origin
#         return numpy.zeros(3*5)

#     def output(self,t):
#         return self.add_offset_and_rot(self.traj_des(t))


#     def add_offset_and_rot(self,position):

#         pos_out = numpy.zeros(3*5)
        
#         R = self.Rotation
        
#         pos_out[0:3]   = R.dot(position[0:3])
#         pos_out[3:6]   = R.dot(position[3:6])
#         pos_out[6:9]   = R.dot(position[6:9])
#         pos_out[9:12]  = R.dot(position[9:12])
#         pos_out[12:15] = R.dot(position[12:15])

#         pos_out[0:3] = pos_out[0:3] + self.offset   

#         return pos_out


#     def update(self,flag,offset,Rot,parameters):

#         self.offset   = offset

#         self.Rotation = Rot

#         self.p1 = parameters[0]
#         self.p2 = parameters[1]
#         self.p3 = parameters[2]
#         self.p4 = parameters[3]

#         if flag == 3:
#             self.traj_des = MethodType(traj_des_elipse, self, TrajectoryGenerator)
#         elif flag==2:
#             self.traj_des = MethodType(traj_des_circle, self, TrajectoryGenerator)
#         else:
#             self.traj_des = MethodType(traj_des_still, self, TrajectoryGenerator)




# def traj_des_still(obj,t):
#     return numpy.zeros(3*5)

# # Desired trajectory for LOAD
# def traj_des_circle(obj,t):

#     from numpy import cos as c
#     from numpy import sin as s

#     r = obj.p1
#     w = obj.p2
    
#     p = r*w**0*numpy.array([ c(w*t),-s(w*t),0.0]);
#     v = r*w**1*numpy.array([-s(w*t),-c(w*t),0.0]);
#     a = r*w**2*numpy.array([-c(w*t), s(w*t),0.0]);
#     j = r*w**3*numpy.array([ s(w*t), c(w*t),0.0]);
#     s = r*w**4*numpy.array([ c(w*t),-s(w*t),0.0]);
    
#     return numpy.concatenate([p,v,a,j,s])


# # Desired trajectory for LOAD
# def traj_des_elipse(obj,t):

#     from numpy import cos as c
#     from numpy import sin as s

#     r = obj.p1
#     w = obj.p2
    
#     p = r*w**0*numpy.array([ c(w*t),-s(w*t),0.0]);
#     v = r*w**1*numpy.array([-s(w*t),-c(w*t),0.0]);
#     a = r*w**2*numpy.array([-c(w*t), s(w*t),0.0]);
#     j = r*w**3*numpy.array([ s(w*t), c(w*t),0.0]);
#     s = r*w**4*numpy.array([ c(w*t),-s(w*t),0.0]);
    
#     return numpy.concatenate([p,v,a,j,s])



#-------------------------------------------------------#
#-------------------------------------------------------#

class traj_des_still():

    def __init__(self,offset,Rotation,parameters=None):

        self.offset   = offset

        self.Rotation = Rotation


    def traj_des(self):
        # by default, desired trajectory is to saty in origin
        return numpy.zeros(3*5)

    def output(self,t):
        return self.add_offset_and_rot(self.traj_des())


    def add_offset_and_rot(self,position):

        pos_out = numpy.zeros(3*5)
        
        R = self.Rotation
        
        pos_out[0:3]   = R.dot(position[0:3])
        pos_out[3:6]   = R.dot(position[3:6])
        pos_out[6:9]   = R.dot(position[6:9])
        pos_out[9:12]  = R.dot(position[9:12])
        pos_out[12:15] = R.dot(position[12:15])

        pos_out[0:3] = pos_out[0:3] + self.offset   

        return pos_out


#-------------------------------------------------------#
#-------------------------------------------------------#

class traj_des_circle():

    def __init__(self,offset,Rotation,parameters=None):

        self.offset   = offset

        self.Rotation = Rotation

        # radius
        self.r = parameters[0]
        # omega
        self.w = parameters[1]


    # trajectory of circle
    def traj_des(self,t):

        from numpy import cos as c
        from numpy import sin as s

        r = self.r
        w = self.w
        
        p = r*w**0*numpy.array([ c(w*t),-s(w*t),0.0]);
        v = r*w**1*numpy.array([-s(w*t),-c(w*t),0.0]);
        a = r*w**2*numpy.array([-c(w*t), s(w*t),0.0]);
        j = r*w**3*numpy.array([ s(w*t), c(w*t),0.0]);
        s = r*w**4*numpy.array([ c(w*t),-s(w*t),0.0]);
        
        return numpy.concatenate([p,v,a,j,s])

    def output(self,t):
        return self.add_offset_and_rot(self.traj_des(t))


    def add_offset_and_rot(self,position):

        pos_out = numpy.zeros(3*5)
        
        R = self.Rotation
        
        pos_out[0:3]   = R.dot(position[0:3])
        pos_out[3:6]   = R.dot(position[3:6])
        pos_out[6:9]   = R.dot(position[6:9])
        pos_out[9:12]  = R.dot(position[9:12])
        pos_out[12:15] = R.dot(position[12:15])

        pos_out[0:3] = pos_out[0:3] + self.offset   

        return pos_out


#-------------------------------------------------------#
#-------------------------------------------------------#

trajectories_dictionary = {0:traj_des_still, 1:traj_des_circle}

controllers_dictionary = {2:ControllerOmega}
#-------------------------------------------------------#
#-------------------------------------------------------#



class quad_controller():

    def __init__(self):

        # frequency of controlling action!!
        self.frequency = 90.0

        # state of quad: position, velocity and attitude
        self.state_quad = numpy.zeros(3+3+3)

        # state of quad: but instead of euler angles it has rotation matrix
        self.state_quad_Rot = numpy.zeros(3+3+9)


        # dy default, desired trajectory is staying still in origin
        traj_class = trajectories_dictionary[0]
        # zero vector
        zvec  = numpy.zeros(3)
        # Identity matrix
        Ident = numpy.array([[1.0,0.0,0.0],[0.0,1.0,0.0],[0.0,0.0,1.0]])
        # dy default
        self.TrajGenerator = traj_class(zvec,Ident)


        self.PublishToGUI = 1
        self.PublishToGUIBound = int(0.1*self.frequency)

        # intiialization should be done in anotehr way, but media will take care of minimizing effects
        self.VelocityEstimator = Velocity_Filter(3,numpy.zeros(3),0.0)


        Cler_class = controllers_dictionary[2]
        self.controller = Cler_class()

    def GET_STATE_(self):

        # if simulator is on, state is updated by subscription
        # if mocap is on, state comes from mocap
        if self.flagMOCAP == True:

            bodies = self.Qs.get_body(self.body_id)

            if bodies != 'off':    


                x=bodies["x"]
                y=bodies["y"]
                z=bodies["z"]   
                # position
                p = numpy.array([x,y,z])

                # velocity
                #v = numpy.array([data.vx,data.vy,data.vz])
                v = self.VelocityEstimator.out(p,rospy.get_time())

                roll=bodies["roll"]
                pitch=bodies["pitch"]
                yaw=bodies["yaw"]
                # attitude: euler angles
                ee = numpy.array([roll,pitch,yaw])

                # collect all components of state
                self.state_quad = numpy.concatenate([p,v,ee])  

            # else:
            # do nothing, keep previous state


    def get_state(self, data):

        # position
        p = numpy.array([data.x,data.y,data.z])

        # velocity
        #v = numpy.array([data.vx,data.vy,data.vz])
        v = self.VelocityEstimator.out(p,rospy.get_time())


        # attitude: euler angles
        ee = numpy.array([data.roll,data.pitch,data.yaw])

        # collect all components of state
        self.state_quad = numpy.concatenate([p,v,ee])  

    def state_ee_to_R(self):
        ee     = self.state_quad[6:9]
        ee_rad = ee*3.14/180
        R  = Rz(ee_rad[2]).dot(Ry(ee_rad[1]).dot(Rx(ee_rad[0])))

        R = numpy.reshape(R,9)

        # collecting all initial states
        self.state_quad_Rot  = numpy.concatenate([self.state_quad[0:6],R])

        return self.state_quad_Rot


    def traj_des(self):

        # time for trajectory generation
        time_TrajDes = rospy.get_time() - self.time_TrajDes_t0

        return self.TrajGenerator.output(time_TrajDes)


    def handle_Save_Data(self,req):
        
        if req.ToSave == True:
            # if GUI request data to be saved create file
            
            # namespace, e.g. /Iris1/
            ns = rospy.get_namespace()
            # remove / symbol to namespace: e.g, we get ns= Iris1
            ns = ns.replace("/", "")

            # string for time: used for generating files
            tt = str(int(rospy.get_time() - self.TimeSaveData))

            self.file_handle  = file('/home/smladmin/TUTORIAL_PPER/'+ns+'_data_'+tt+'.txt', 'w')
            # if GUI request data to be saved, set falg to true
            self.SaveDataFlag = True
        else:
            # if GUI request data NOT to be saved, set falg to False
            self.SaveDataFlag = False

        # return message to Gui, to let it know resquest has been fulfilled
        return SaveDataResponse(True)


    def handle_Controller_Srv(self,req):


        # if GUI request certain trajectory, update flag on desired trajectory 
        fg_Cler = req.flag_controller


        # some parameters user can change easily 
        # req.parameters is a tuple
        if len(req.parameters) == 0:
            # if tuple req.parameters is empty:
            parameters = None
        else:     
            # if tuple is not empty, cast parameters as numpy array 
            parameters = numpy.array(req.parameters)


        # update class for Controller
        # Cler_class = controllers_dictionary[fg_Cler]
        Cler_class = controllers_dictionary[2]

        self.controller = Cler_class(parameters)
        # self.controller = Cler_class()

        # return message to Gui, to let it know resquest has been fulfilled
        return Controller_SrvResponse(True)


    def handle_TrajDes_service(self,req):

        # if GUI request certain trajectory, update flag on desired trajectory 
        self.flagTrajDes = req.trajectory

        TrajDes_OffSet = numpy.array([req.x,req.y,req.z])

        ee     = numpy.array([req.phi,req.theta,req.psi])
        ee_rad = ee*3.14/180

        TrajDes_Rotation = Rz(ee_rad[2]).dot(Ry(ee_rad[1]).dot(Rx(ee_rad[0])))   

        TrajDes_parameters = numpy.array([req.p1,req.p2,req.p3,req.p4])

        # update class for TrajectoryGenerator
        traj_class = trajectories_dictionary[self.flagTrajDes]

        self.TrajGenerator = traj_class(TrajDes_OffSet,TrajDes_Rotation,TrajDes_parameters)

        # we need to update initial time for trajectory generation
        self.time_TrajDes_t0 = rospy.get_time()

        # return message to Gui, to let it know resquest has been fulfilled
        return TrajDes_SrvResponse(True)


    def stop_simulator(self):
        try: 
            rospy.wait_for_service('StartSimulator',1.0)

            try:
                AskForStart = rospy.ServiceProxy('StartSimulator', StartSim)

                reply = AskForStart(False)
                if reply.Started == True:
                    return True
                else:
                    return False
            except:
                return False

        except:
            return False


    def handle_Mocap(self,req):

        if self.flagMOCAP_On == True:

            if req.On == False:
                # in case Qs is not defined yet
                try: 
                    # close mocap connection
                    self.Qs._stop_measurement()
                    del self.Qs

                    self.flagMOCAP_On = False

                    # set flag to OFF
                    self.flagMOCAP = False

                    # subscribe again to simultor messages
                    self.SubToSim = rospy.Subscriber("quad_state", quad_state, self.get_state) 

                    # service has been provided
                    return Mocap_IdResponse(True,True)
                except:
                    # service was NOT provided
                    return Mocap_IdResponse(True,False) 


            if req.change_id == True:

                # see list of available bodies
                bodies = self.Qs.get_updated_bodies()

                # check is body_id available
                body_indice = -1

                # Get the corresponding id of the body
                if isinstance(bodies,list):
                    for i in range(0,len(bodies)):
                        if(bodies[i]['id']==req.id):
                            body_indice=i

                # save body id
                self.body_id = req.id                        

                # stop simulator
                stop = self.stop_simulator()

                if stop == True:

                    if body_indice == -1:

                        # body does not exist
                        self.flagMOCAP = False

                        # body does not exist, but service was provided
                        return Mocap_IdResponse(False,True)
                    else:
                        # body exists
                        
                        # set flag to on
                        self.flagMOCAP = True

                        # body EXISTS, and service was provided
                        return Mocap_IdResponse(True,True)
                else:
                    self.flagMOCAP = False
                    # service was NOT provided
                    return Mocap_IdResponse(False,False)


        else:

            if req.On == True:
                # establish connection to qualisys
                self.Qs = mocap_source.Mocap(info=0)

                # stop subscription to data from simulator
                # unsubscribe to topic
                self.SubToSim.unregister()

                self.flagMOCAP_On = True

                # service was provided
                return Mocap_IdResponse(False,True)        



    def PublishToGui(self,states_d,Input_to_Quad):


        # create a message of type quad_state_and_cmd
        st_cmd = quad_state_and_cmd()

        # get current time
        st_cmd.time  = rospy.get_time()

        # state of quad comes from QUALISYS, or other sensor
        st_cmd.x     = self.state_quad[0]
        st_cmd.y     = self.state_quad[1]
        st_cmd.z     = self.state_quad[2]
        st_cmd.vx    = self.state_quad[3]
        st_cmd.vy    = self.state_quad[4]
        st_cmd.vz    = self.state_quad[5]
        st_cmd.roll  = self.state_quad[6]
        st_cmd.pitch = self.state_quad[7]
        st_cmd.yaw   = self.state_quad[8]
        
        st_cmd.xd    = states_d[0]
        st_cmd.yd    = states_d[1]
        st_cmd.zd    = states_d[2]
        st_cmd.vxd   = states_d[3]
        st_cmd.vyd   = states_d[4]
        st_cmd.vzd   = states_d[5]

        st_cmd.cmd_1     = Input_to_Quad[0]
        st_cmd.cmd_2     = Input_to_Quad[1]
        st_cmd.cmd_3     = Input_to_Quad[2]
        st_cmd.cmd_4     = Input_to_Quad[3]

        st_cmd.cmd_5     = 1500.0
        st_cmd.cmd_6     = 1500.0
        st_cmd.cmd_7     = 1500.0
        st_cmd.cmd_8     = 1500.0

        if self.PublishToGUI <= self.PublishToGUIBound:
            self.PublishToGUI = self.PublishToGUI + 1
        else:
            self.PublishToGUI = 1
            self.pub.publish(st_cmd)         


    def PublishToQuad(self,Input_to_Quad):

        cmd = quad_cmd()
        cmd.cmd_1 = Input_to_Quad[0];
        cmd.cmd_2 = Input_to_Quad[1];
        cmd.cmd_3 = Input_to_Quad[2];
        cmd.cmd_4 = Input_to_Quad[3];

        cmd.cmd_5 = 1500.0
        cmd.cmd_6 = 1500.0
        cmd.cmd_7 = 1500.0
        cmd.cmd_8 = 1500.0

        self.pub_cmd.publish(cmd)


    def control_compute(self):

        # node will be named quad_control (see rqt_graph)
        rospy.init_node('quad_control', anonymous=True)

        # message published by quad_control 
        self.pub = rospy.Publisher('quad_state_and_cmd', quad_state_and_cmd, queue_size=10)
        
        # message published by quad_control 
        self.pub_cmd = rospy.Publisher('quad_cmd', quad_cmd, queue_size=10)


        # controller needs to have access to STATE of the system
        # this can come from QUALISYS, a sensor, or the simulator
        self.SubToSim = rospy.Subscriber("quad_state", quad_state, self.get_state) 

        #-----------------------------------------------------------------------#
        #-----------------------------------------------------------------------#
        # TO SAVE FLAG
        # by default, NO data is saved
        self.SaveDataFlag = False
        # we will use this just for convenience, when generating the names of the files
        # where the data will be saved
        self.TimeSaveData = rospy.get_time()
        # Service is created, so that data is saved when GUI requests
        Save_data_service = rospy.Service('SaveDataFromGui', SaveData, self.handle_Save_Data)



        #-----------------------------------------------------------------------#
        #-----------------------------------------------------------------------#
        # SERVICE FOR SELECTING DESIRED TRAJECTORY
        # by default, ORIGIN IS DESIRED TRAJECTORY
        self.flagTrajDes = 1
        # Service is created, so that data is saved when GUI requests
        TrajDes_service = rospy.Service('TrajDes_GUI', TrajDes_Srv, self.handle_TrajDes_service)

        # initialize initial time for trajectory generation
        self.time_TrajDes_t0 = rospy.get_time()


        #-----------------------------------------------------------------------#
        #-----------------------------------------------------------------------#
        # flag for MOCAP is initialized as FALSE
        self.flagMOCAP = False
        self.flagMOCAP_On = False
        # Service is created, so that data is saved when GUI requests
        Save_MOCAP_service = rospy.Service('Mocap_Set_Id', Mocap_Id, self.handle_Mocap)


        #-----------------------------------------------------------------------#
        #-----------------------------------------------------------------------#
        # Service is created, so that user can change controller on GUI
        Chg_Contller = rospy.Service('Controller_GUI', Controller_Srv, self.handle_Controller_Srv)


        #-----------------------------------------------------------------------#
        #-----------------------------------------------------------------------#
        # self.controller = ControllerOmega()
        # self.controller.update_parameters(parameters_sys())

        #-----------------------------------------------------------------------#
        #-----------------------------------------------------------------------#

        rate = rospy.Rate(self.frequency)

        while not rospy.is_shutdown():

            self.GET_STATE_()

            states = self.state_ee_to_R()

            # states for desired trajectory
            states_d = self.traj_des()

            Input_to_Quad = self.controller.output(states,states_d)
            
            self.PublishToQuad(Input_to_Quad)

            self.PublishToGui(states_d,Input_to_Quad)


            if self.SaveDataFlag == True:
                numpy.savetxt(self.file_handle, [concatenate([[rospy.get_time()], self.state_quad[0:6], states_d, Input_to_Quad])],delimiter=' ')


            rate.sleep()    



if __name__ == '__main__':
    A_Controller = quad_controller()
    try:
        A_Controller.control_compute()
    except rospy.ROSInterruptException:
        pass




