#!/usr/bin/env python

## Security feature of autonomous drone flight in the SML lab.
## Mabnage the permissions of the differents node
## Checks the data coming from Qualysis, as well as the safety boundaries set for the drone.
## In case of violations, disables the controller, and enables the landing node


# import sys
import rospy

from mavros.srv import ParamSet
from mavros.srv import ParamGet
from mavros.srv import CommandBool
from mavros.srv import SetMode


from mavros.msg import OverrideRCIn


# set_mode = rospy.ServiceProxy('mavros/set_mode', SetMode)
# mode_set = set_mode(base_mode=0, custom_mode='LAND')


rc_override=rospy.Publisher('mavros/rc/override',OverrideRCIn,queue_size=10)

# create message of type OverrideRCIn
rc_cmd          = OverrideRCIn()
command         = [1500,1500,1500,1500,1500,1500,1500,1500]
rc_cmd.channels = command
rc_override.publish(rc_cmd)



## Initialize the quadcopter flight mode, change the system ID and arm
##@return true if the quad was successfully armed, false otherwise
def Prepare_For_Flight():

	#Set the flight mode to stabilize (default)
	# Modes: 'LAND', 'STABILIZE', 'ACRO'
	mode_success   = Set_Flight_Mode('STABILIZE')
	ID_success     = Set_System_ID(1)
	arming_success = Arming_Quad()

	if mode_success and ID_success and arming_success:
		return True
	else:
		return False



def Set_Flight_Mode(MODE):
	
	#Change the flight mode on the Pixhawk flight controller
	try:
		# it waits for service for 10 seconds
		rospy.wait_for_service('mavros/set_mode',10)

		try:
			change_param = rospy.ServiceProxy('mavros/set_mode',SetMode)
			param=change_param(0,MODE)

			if param.success:
				rospy.logwarn('Flight mode changed to '+MODE)
				return True
			else:
				rospy.logwarn('Mavros is not available')
				return False
		except:
			rospy.logwarn('Mavros is not available')
			return False

	except:
		rospy.logwarn('Mavros is not available')
		return False




## Set the system ID.
##
## This is necessary to set the SYSID_MYGCS parameter before flying.
##
##@param id_int: an integer to set the system ID to
##@return true if the system ID was set successfully and a connection to Mavros was establishe, false otherwise
def Set_System_ID(id_int):
        """This function sets the system ID and checks if it is possible to connect to mavros. The system ID
        should be 1 to be able to use the rc/override topic."""

	rospy.logwarn('Connecting to Mavros ...')
	try:
		rospy.wait_for_service('mavros/param/set',10)

		try:
			change_param=rospy.ServiceProxy('mavros/param/set',ParamSet)
			param=change_param('SYSID_MYGCS',id_int,0.0)

			if param.success:
				rospy.logwarn('System ID changed')
				return True
			else:
				rospy.logwarn('Cannot change system ID')
				return False
		except:
			rospy.logwarn('Cannot change system ID')
			return False

	except:
		rospy.logwarn('Mavros is not available (fail to contact service mavros/param/set).')
		return False




## Arm the quad: This function ask for the quad arming.
##
## @param basename: name of the iris group (iris1, iris2, ...)
## @return returns true if the quad was armed successfully and false otherwise
def Arming_Quad(base_name=""):
        """This function is used to arm the quad."""

	#Arming the Quad
	srv_path = 'mavros/cmd/arming'
	if base_name!="":
		srv_path = "/%s/%s"%(base_name,srv_path)

	try:
		rospy.logwarn('Arming Quad ...')
		rospy.wait_for_service(srv_path,10)

		try:
			arming = rospy.ServiceProxy(srv_path,CommandBool)
			arming_result=arming(True)
			if arming_result.success:
				rospy.logwarn('Quad is Armed!!!!')
				return False
			else:
				rospy.logwarn('Cannot arm quad')
				return True

		except:
			rospy.logwarn('Cannot arm quad')
			return False

	except:
		rospy.logwarn('No connection to Mavros')
		rreturn False

